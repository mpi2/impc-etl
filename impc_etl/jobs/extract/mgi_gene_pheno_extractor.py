"""

[MGI Gene Pheno report](http://www.informatics.jax.org/downloads/reports/MGI_GenePheno.rpt) extraction Task.
This report contains the list of Gene Phenotype Associations reported in MGI.

### From [MGI Reports / Alleles and Phenotypes section](http://www.informatics.jax.org/downloads/reports/index.html#pheno):

#### 9.  Genotypes and Mammalian Phenotype Annotations for Marker Type Genes
excluding conditional mutations (tab-delimited):

| Allelic Composition     | Allele Symbol(s) | Allele ID(s) | Genetic Background    | Mammalian Phenotype ID | PubMed ID (pipe-delimited) | MGI Marker Accession ID (pipe-delimited) | MGI Genotype Accession ID (pipe-delimited) |
|-------------------------|------------------|--------------|-----------------------|------------------------|----------------------------|------------------------------------------|--------------------------------------------|
| Rb1<tm1Tyj>/Rb1<tm1Tyj> | Rb1<tm1Tyj>      | MGI:1857242  | involves: 129S2/SvPas | MP:0000600             | 12529408                   | MGI:97874                                | MGI:2166359                                |
...
"""
import luigi
from luigi.contrib.spark import PySparkTask
from pyspark import SparkContext
from pyspark.sql import DataFrame, SparkSession
from pyspark.sql.types import StructType, StructField, StringType

from impc_etl.shared.utils import extract_tsv
from impc_etl.workflow.config import ImpcConfig

GENE_PHENO_SCHEMA = StructType(
    [
        StructField("allelicComposition", StringType(), True),
        StructField("alleleSymbol", StringType(), True),
        StructField("mgiAlleleID", StringType(), True),
        StructField("geneticBackground", StringType(), True),
        StructField("mammalianPhenotypeID", StringType(), True),
        StructField("pubMedID", StringType(), True),
        StructField("mgiMarkerAccessionID", StringType(), True),
        StructField("mgiGenotypeAccessionID", StringType(), True),
    ]
)


class MGIGenePhenoReportExtractor(PySparkTask):
    """
    PySpark Task class to extract the information from the
    [MGI Gene Pheno report](http://www.informatics.jax.org/downloads/reports/MGI_GenePheno.rpt).
    It also adds a header to the RPT format content (allelicComposition, alleleSymbol, mgiAlleleID, geneticBackground,
    mammalianPhenotypeID, pubMedID, mgiMarkerAccessionID, mgiGenotypeAccessionID).
    """

    #: Name of the Spark task
    name: str = "IMPC_MGI_Gene_Pheno_Report_Extractor"

    #: Path of the MGI Gene Pheno report *.rpt file.
    mgi_gene_pheno_report_path: luigi.Parameter = luigi.Parameter()

    #: Path of the output directory where ethe new parquet file will be generated.
    output_path: luigi.Parameter = luigi.Parameter()

    def output(self):
        """
        Returns the full parquet path as an output for the Luigi Task
        (e.g. impc/dr15.2/parquet/mgi_gene_pheno_parquet)
        """
        return ImpcConfig().get_target(f"{self.output_path}mgi_gene_pheno_parquet")

    def app_options(self):
        """
        Generates the options pass to the PySpark job
        """
        return [
            self.mgi_gene_pheno_report_path,
            self.output().path,
        ]

    def main(self, sc: SparkContext, *args):
        """
        Takes in a SparkContext and the list of arguments generated by `app_options` and executes the PySpark job.
        """
        mgi_gene_pheno_report_path = args[0]
        output_path = args[1]

        spark = SparkSession(sc)

        mgi_gene_pheno_df: DataFrame = extract_tsv(
            spark, mgi_gene_pheno_report_path, schema=GENE_PHENO_SCHEMA, header=False
        )
        mgi_gene_pheno_df.write.mode("overwrite").parquet(output_path)
